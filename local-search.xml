<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sql注入简单防御 -- 完善cpp课程设计</title>
    <link href="/2024/05/14/%E5%9F%BA%E4%BA%8E/"/>
    <url>/2024/05/14/%E5%9F%BA%E4%BA%8E/</url>
    
    <content type="html"><![CDATA[<p>之前用QT写了(抄的)cpp课程设计-图书管理系统,在sql实现部分没有做任何的防御措施，导致任何一个输入都是注入点，所以想着完善一下，起码做一些简单的防御。</p><p><img src="/../res/2_1.png" alt="初始登陆界面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 参数">1<br>&#x27; or 1=1 --<br></code></pre></td></tr></table></figure><p>登陆成功</p><p>源代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QString  sql = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;select * from user where username=&#x27;%1&#x27; and password = &#x27;%2&#x27;&quot;</span>).<span class="hljs-built_in">arg</span>(strUser).<span class="hljs-built_in">arg</span>(strPasswd);<br>    <span class="hljs-function">QSqlQuery <span class="hljs-title">q</span><span class="hljs-params">(sql,m_db)</span></span>;<br><br>    <span class="hljs-keyword">if</span>(!q.<span class="hljs-built_in">next</span>())&#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; q.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>拼接后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">-- &#x27;</span><br></code></pre></td></tr></table></figure><p>加入正则表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">QRegularExpression <span class="hljs-title">regExp</span><span class="hljs-params">(<span class="hljs-string">&quot;^[A-Za-z0-9]+$&quot;</span>)</span></span>;<br>...<br> QRegularExpressionMatch mat = regExp.<span class="hljs-built_in">match</span>(userName);  <span class="hljs-comment">//match函数返回的是一个QRegularExpressionMatch类</span><br>    <span class="hljs-keyword">if</span>(!mat.<span class="hljs-built_in">hasMatch</span>())&#123;<br>        QMessageBox::<span class="hljs-built_in">warning</span>(<span class="hljs-literal">nullptr</span>,<span class="hljs-string">&quot;警告&quot;</span>,<span class="hljs-string">&quot;只能输入数字，字母&quot;</span>,QMessageBox::Ok);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setResult</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!regExp.<span class="hljs-built_in">match</span>(passWord).<span class="hljs-built_in">hasMatch</span>())&#123;<br>        QMessageBox::<span class="hljs-built_in">warning</span>(<span class="hljs-literal">nullptr</span>,<span class="hljs-string">&quot;警告&quot;</span>,<span class="hljs-string">&quot;只能输入数字，字母&quot;</span>,QMessageBox::Ok);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setResult</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br></code></pre></td></tr></table></figure><p>由于不太懂QT的语法，而且网上好多都是基于QRegExp类的正则匹配，新版本的QT似乎已经不再QRegExp类了，取而代之是QRegularExpressionMatch用所以花了一些时间阅读函数手册。</p><p><img src="/../res/2.2.png" alt="再次利用之前的SQL注入"></p><p>利用正则表达式限制输入为数字和字母，能够有效的防御一些基础的sql注入，复杂一些的攻击方式和防御手段有时间再补充吧</p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Radare2--linux系统下的动态调试工具</title>
    <link href="/2024/05/12/r2-%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/12/r2-%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>需要进行linux文件的动态调试(其实是懒得分析静态逻辑),但是linux平台不晓得有没有什么特别好的调试工具,所以学习一下Radare2,顺便记录指令，方便以后查阅</p><h2 id="让r2自动分析可执行文件"><a href="#让r2自动分析可执行文件" class="headerlink" title="让r2自动分析可执行文件"></a>让r2自动分析可执行文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">r2 -A ./fileName<br></code></pre></td></tr></table></figure><h2 id="获取一些基本的二进制信息"><a href="#获取一些基本的二进制信息" class="headerlink" title="获取一些基本的二进制信息"></a>获取一些基本的二进制信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iI<br></code></pre></td></tr></table></figure><h2 id="查看导入和导出函数"><a href="#查看导入和导出函数" class="headerlink" title="查看导入和导出函数"></a>查看导入和导出函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ii    //查看导入函数<br>iE    //查看到处函数<br></code></pre></td></tr></table></figure><h2 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">afl       // <span class="hljs-keyword">function</span> list<br></code></pre></td></tr></table></figure><h2 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">axt  函数名<br>axt 地址<br></code></pre></td></tr></table></figure><h2 id="寻找定位"><a href="#寻找定位" class="headerlink" title="寻找定位"></a>寻找定位</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s 地址或函数名<br></code></pre></td></tr></table></figure><h2 id="十六进制视图"><a href="#十六进制视图" class="headerlink" title="十六进制视图"></a>十六进制视图</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">px<br></code></pre></td></tr></table></figure><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">s 函数名   //找到函数 或地址<br>pdf <br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iz   //显示程序中的字符串<br></code></pre></td></tr></table></figure><h2 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">VV <br></code></pre></td></tr></table></figure><p><strong>目前为止，还都只是静态调试，我把这些称为鸡肋命令，因为ida完全可以替代，接下来才是关键</strong></p><h2 id="启动调试器"><a href="#启动调试器" class="headerlink" title="启动调试器"></a>启动调试器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-d //启动调试器<br>db //添加断点<br>dbi //查看断点<br>dc //开始运行<br>dbt //查看堆栈<br>drr //转存寄存器<br></code></pre></td></tr></table></figure><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>需要下载一个插件r2dec</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">r2pm install r2dec<br>r2pm -l //查看下载的插件<br>pdda   //反编译指令<br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说基本能实现x64dbg功能，但是命令行会有一些不方便,虽然ida也支持远程动态调试，但我总是配置不好，也不太懂附加进程调试，所以先用一下r2试一下</p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
